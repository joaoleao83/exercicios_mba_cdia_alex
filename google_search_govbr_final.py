# Importa√ß√µes necess√°rias para o Selenium e outras funcionalidades
from selenium import webdriver  # Biblioteca principal para automa√ß√£o web
from selenium.webdriver.common.by import By  # Classe para localizar elementos na p√°gina
from selenium.webdriver.common.keys import Keys  # Classe para simular teclas do teclado
from selenium.webdriver.chrome.service import Service  # Servi√ßo para gerenciar o ChromeDriver
from selenium.webdriver.chrome.options import Options  # Op√ß√µes de configura√ß√£o do Chrome
import time  # Biblioteca para pausas e delays
import json  # Biblioteca para formata√ß√£o de dados em JSON
import random  # Biblioteca para gerar n√∫meros aleat√≥rios (simular comportamento humano)

def buscar_google_govbr():
    """
    üéØ FUN√á√ÉO PRINCIPAL: Busca no Google pelo termo 'gov.br' 
    
    Esta fun√ß√£o automatiza uma busca no Google e coleta informa√ß√µes dos resultados:
    - Abre o navegador Chrome de forma invis√≠vel (headless)
    - Acessa o Google e realiza a busca por 'gov.br'
    - Coleta o t√≠tulo e URL de cada resultado da primeira p√°gina
    - Retorna uma lista estruturada com os dados coletados
    
    Returns:
        list: Lista de dicion√°rios no formato [{"titulo": "...", "url": "..."}]
    """
    
    # üîß CONFIGURA√á√ÉO DO NAVEGADOR CHROME
    chrome_options = Options()  # Cria objeto de op√ß√µes do Chrome
    
    # Configura√ß√µes para execu√ß√£o invis√≠vel e otimizada:
    chrome_options.add_argument('--headless')  # Executar sem interface gr√°fica (invis√≠vel)
    chrome_options.add_argument('--disable-gpu')  # Desabilitar acelera√ß√£o gr√°fica (evita erros)
    chrome_options.add_argument('--no-sandbox')  # Desabilitar sandbox (necess√°rio em alguns sistemas)
    chrome_options.add_argument('--disable-dev-shm-usage')  # Evitar problemas de mem√≥ria
    chrome_options.add_argument('--disable-blink-features=AutomationControlled')  # Ocultar automa√ß√£o
    chrome_options.add_argument('--disable-logging')  # Desabilitar logs verbosos
    chrome_options.add_argument('--silent')  # Modo silencioso
    
    # Configura√ß√µes avan√ßadas para parecer mais humano:
    chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])  # Remove flag de automa√ß√£o
    chrome_options.add_experimental_option('useAutomationExtension', False)  # Desabilita extens√£o de automa√ß√£o
    # User-Agent real do Chrome para parecer um usu√°rio normal:
    chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

    # Inicializar o servi√ßo e o navegador
    service = Service()  # Cria servi√ßo padr√£o do ChromeDriver
    driver = webdriver.Chrome(service=service, options=chrome_options)  # Inicia o Chrome com as configura√ß√µes
    
    # üïµÔ∏è MASCARAR AUTOMA√á√ÉO - Remove propriedade que identifica bots
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

    resultados = []  # Lista para armazenar os resultados coletados

    try:
        # üåê ACESSAR O GOOGLE
        print("Acessando Google...")
        driver.get('https://www.google.com')  # Navega para a p√°gina inicial do Google
        
        # ‚è±Ô∏è AGUARDAR CARREGAMENTO - Pausa aleat√≥ria para simular comportamento humano
        time.sleep(random.uniform(2, 3))  # Espera entre 2 e 3 segundos
        
        # üç™ ACEITAR COOKIES (se aparecer o popup)
        try:
            # Procura bot√£o de aceitar cookies em portugu√™s ou ingl√™s
            aceitar_btn = driver.find_element(By.XPATH, "//button[contains(text(), 'Aceitar') or contains(text(), 'Accept')]")
            aceitar_btn.click()  # Clica no bot√£o
            time.sleep(1)  # Aguarda 1 segundo ap√≥s clicar
        except:
            pass  # Se n√£o encontrar o bot√£o, continua (n√£o √© obrigat√≥rio)
        
        # üîç LOCALIZAR CAIXA DE BUSCA
        search_box = driver.find_element(By.NAME, 'q')  # Encontra campo de busca pelo atributo 'name'
        
        # ‚å®Ô∏è SIMULAR DIGITA√á√ÉO HUMANA
        search_box.clear()  # Limpa qualquer texto existente
        termo = "gov.br"  # Define o termo de busca
        
        # Digita cada caractere com delay aleat√≥rio para parecer humano:
        for char in termo:
            search_box.send_keys(char)  # Digita um caractere
            time.sleep(random.uniform(0.05, 0.1))  # Pausa entre 0.05 e 0.1 segundos
        
        time.sleep(1)  # Pausa antes de pressionar Enter
        search_box.send_keys(Keys.RETURN)  # Pressiona Enter para buscar
        
        # ‚è≥ AGUARDAR RESULTADOS DA BUSCA
        print("Aguardando resultados...")
        time.sleep(random.uniform(3, 4))  # Aguarda entre 3 e 4 segundos para carregar
        
        # üö´ VERIFICAR SE FOI BLOQUEADO PELO GOOGLE
        if 'sorry' in driver.current_url:
            print("‚ùå Google bloqueou a requisi√ß√£o.")
            return []  # Retorna lista vazia se foi bloqueado
        
        print("Coletando resultados...")
        
        # üéØ LOCALIZAR ELEMENTOS DOS RESULTADOS
        # Primeira tentativa - seletor mais espec√≠fico:
        elementos = driver.find_elements(By.CSS_SELECTOR, 'div.yuRUbf h3')
        
        # Se n√£o encontrou, tenta seletor alternativo:
        if not elementos:
            elementos = driver.find_elements(By.CSS_SELECTOR, 'div.g h3')
        
        # Se ainda n√£o encontrou, tenta seletor gen√©rico:
        if not elementos:
            elementos = driver.find_elements(By.CSS_SELECTOR, 'h3')
        
        print(f"Encontrados {len(elementos)} resultados")
        
        # üìã PROCESSAR CADA RESULTADO (m√°ximo 10 da primeira p√°gina)
        for i, elemento in enumerate(elementos[:10]):  # Limita a 10 resultados
            try:
                # üìù EXTRAIR T√çTULO
                titulo = elemento.text.strip()  # Pega o texto e remove espa√ßos extras
                
                # Validar t√≠tulo (deve ter pelo menos 5 caracteres):
                if not titulo or len(titulo) < 5:
                    continue  # Pula para o pr√≥ximo se t√≠tulo inv√°lido
                
                # üîó EXTRAIR URL DO RESULTADO
                url = None
                try:
                    # M√©todo 1: Busca o container pai do resultado
                    container = elemento.find_element(By.XPATH, "./ancestor::div[contains(@class,'g') or contains(@class,'yuRUbf')][1]")
                    link = container.find_element(By.TAG_NAME, 'a')  # Encontra o link dentro do container
                    url = link.get_attribute('href')  # Extrai a URL
                except:
                    try:
                        # M√©todo 2: Verifica se o elemento pai √© um link
                        parent = elemento.find_element(By.XPATH, "..")  # Pega elemento pai
                        if parent.tag_name == 'a':  # Se o pai for um link
                            url = parent.get_attribute('href')  # Extrai a URL
                    except:
                        continue  # Se n√£o conseguir extrair URL, pula resultado
                
                # ‚úÖ VALIDAR E FILTRAR URLs
                if (url and url.startswith('http') and  # URL deve come√ßar com http
                    'google.com/url' not in url and  # N√£o deve ser link interno do Google
                    'webcache.googleusercontent.com' not in url):  # N√£o deve ser cache do Google
                    
                    # üì¶ CRIAR DICION√ÅRIO COM O RESULTADO
                    resultado = {
                        'titulo': titulo,  # T√≠tulo da p√°gina
                        'url': url        # URL da p√°gina
                    }
                    resultados.append(resultado)  # Adiciona √† lista de resultados
                    print(f"‚úì Coletado: {titulo[:50]}...")  # Mostra os primeiros 50 caracteres do t√≠tulo
                    
            except Exception as e:
                continue  # Se houver erro com um resultado, continua para o pr√≥ximo
        
        # üìä MOSTRAR ESTAT√çSTICAS FINAIS
        print(f"\nTotal de resultados coletados: {len(resultados)}")
        return resultados  # Retorna lista com todos os resultados coletados
        
    except Exception as e:
        # üö® TRATAMENTO DE ERROS GERAIS
        print(f"Erro: {e}")
        return []  # Retorna lista vazia em caso de erro
    
    finally:
        # üßπ LIMPEZA - Sempre fecha o navegador, mesmo se houver erro
        driver.quit()

# üöÄ EXECU√á√ÉO PRINCIPAL DO PROGRAMA
if __name__ == "__main__":
    # Executa a fun√ß√£o de busca:
    resultados = buscar_google_govbr()
    
    # üìã EXIBIR RESULTADOS FORMATADOS
    if resultados:
        print("\n" + "="*60)
        print("RESULTADOS DA BUSCA 'gov.br' NO GOOGLE")
        print("="*60)
        # Exibe os resultados em formato JSON bonito:
        print(json.dumps(resultados, indent=2, ensure_ascii=False))
    else:
        print("Nenhum resultado foi coletado.")
